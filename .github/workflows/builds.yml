name: V-Sekai Builds

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

env:
  GODOT_BASE_BRANCH: master
  SCONSFLAGS: verbose=yes warnings=extra werror=no module_text_server_fb_enabled=yes use_thinlto=yes
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  EM_VERSION: 3.1.18
  EM_CACHE_FOLDER: "emsdk-cache"
  OSXCROSS_ROOT: /tmp/

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-deploy
  cancel-in-progress: true

jobs:
  build:
    runs-on: "ubuntu-22.04"
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux_editor_win_deploy
            cache-name: linux-editor-deploy-windows-editor
            target: editor
            tests: false
            sconsflags: linker=gold scu_build=yes precision=double use_mingw=yes
            doc-test: false
            bin: ./godot/bin/godot.linuxbsd.editor.double.x86_64
            deploy-bin: ./godot/bin/godot.windows.editor.double.x86_64.exe
            editor-bin-name: godot.windows.editor.double.x86_64.exe
            proj-conv: false
            artifact: true
            platform: linuxbsd
            deploy: true
            deploy-pdb: true
            deploy-platform: windows
            export-platform: Windows
            deploy-platform-target: editor

          - name: linux_editor_linux_deploy
            cache-name: linux-editor-deploy-linux-editor
            target: editor
            tests: false
            sconsflags: linker=gold scu_build=yes precision=double use_llvm=yes
            doc-test: false
            bin: ./godot/bin/godot.linuxbsd.editor.double.x86_64.llvm
            deploy-bin: ./godot/bin/godot.linuxbsd.editor.double.x86_64.llvm
            editor-bin-name: godot.linuxbsd.editor.double.x86_64.llvm
            proj-conv: false
            artifact: true
            platform: linuxbsd
            deploy: true
            deploy-platform: linux
            export-platform: Linux
            deploy-platform-target: editor

    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v3.5.2

      - name: Linux dependencies for gold linker
        if: ${{ matrix.platform == 'linux' }}
        run: |
          sudo apt-get install -qq binutils
        shell: bash

      - name: Install MinGW
        if: ${{ matrix.deploy-platform == 'windows' }}
        run: |
          sudo add-apt-repository ppa:savoury1/build-tools
          sudo apt-get update
          sudo apt-get install mingw-w64
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
        shell: bash

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Set up Emscripten latest
        if: ${{ matrix.platform == 'web' }}
        uses: mymindstorm/setup-emsdk@ab889da2abbcbb280f91ec4c215d3bb4f3a8f775 # v12
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}

      - name: Verify Emscripten setup
        if: ${{ matrix.platform == 'web' }}
        run: |
          emcc -v
        shell: bash

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps
        with:
          godot-ref: "groups-4.2"

      - name: Set up .NET Sdk
        uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # v3.2.0
        if: ${{ matrix.build-mono }}
        with:
          dotnet-version: "6.0.x"

      - name: Setup GCC problem matcher
        uses: ammaraskar/gcc-problem-matcher@d1fed1fac9e94d30e23b5a82dba4e2963e71d2e7 # master

      - name: Compilation
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: ${{ matrix.platform }}
          target: ${{ matrix.target }}
          tests: ${{ matrix.tests }}
          deploy: ${{ matrix.deploy }}
          deploy-platform: ${{ matrix.deploy-platform }}
          deploy-platform-target: ${{ matrix.deploy-platform-target }}

      - name: Compilation
        if: ${{ matrix.deploy-platform == 'windows' }}
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: ${{ matrix.platform }}
          target: ${{ matrix.target }}
          tests: false
          deploy: false
          deploy-platform: ${{ matrix.platform }}
          deploy-platform-target: ${{ matrix.target }}

      - name: Generate build constants
        uses: ./.github/actions/vsk-generate-constants

      - name: Export Game
        if: ${{ matrix.deploy }}
        run: |
          mkdir -p .godot/editor .godot/imported export_${{ matrix.deploy-platform }}
          chmod +x ${{ matrix.bin }}
          ${{ matrix.bin }} --headless --xr-mode off --export-pack ${{ matrix.export-platform }}  `pwd`/model_explorer_${{ matrix.deploy-platform }}.pck --path . || true
        timeout-minutes: 10
        shell: bash

      - name: Prepare artifacts
        if: ${{ matrix.deploy }}
        run: |
          tree -L 1
          # Check if the .pck file exists
          if [ ! -f ./model_explorer_${{ matrix.deploy-platform }}.pck ]; then
              echo "Error: model_explorer_${{ matrix.deploy-platform }}.pck does not exist."
              exit 1
          fi

          # Check if the path to the .pck file is correct
          if [ ! -f `pwd`/model_explorer_${{ matrix.deploy-platform }}.pck ]; then
              echo "Error: The path to model_explorer_${{ matrix.deploy-platform }}.pck is incorrect."
              exit 1
          fi

          rm -rf model_explorer_${{ matrix.deploy-platform }}
          export TARGET=model_explorer_${{ matrix.deploy-platform }}
          mkdir -p $TARGET

          # If deploy platform is windows, append .exe to the binary
          if [ "${{ matrix.deploy-platform }}" == "windows" ]; then
              cp -rf ${{ matrix.deploy-bin }} $TARGET/model_explorer_${{ matrix.deploy-platform }}.exe
          else
              cp -rf ${{ matrix.deploy-bin }} $TARGET/model_explorer_${{ matrix.deploy-platform }}
          fi

          cp -rf `pwd`/model_explorer_${{ matrix.deploy-platform }}.pck $TARGET/model_explorer_${{ matrix.deploy-platform }}.pck
          7z a -r $TARGET.zip $TARGET
        shell: bash

      - name: Upload Godot Artifact Export
        if: ${{ matrix.deploy }}
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: model_explorer_${{ matrix.deploy-platform }}_x86_64
          path: |
            model_explorer_${{ matrix.deploy-platform }}

      - name: Generate C# glue
        if: ${{ matrix.build-mono }}
        run: |
          ${{ matrix.bin }} --headless --generate-mono-glue ./modules/mono/glue || true
        shell: bash

      - name: Build .NET solutions
        if: ${{ matrix.build-mono }}
        run: |
          ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd
        shell: bash

      - name: Unit tests
        if: ${{ matrix.tests }}
        run: |
          ${{ matrix.bin }} --version
          ${{ matrix.bin }} --help
          ${{ matrix.bin }} --test --headless
        shell: bash

      - name: Check for class reference updates
        if: ${{ matrix.doc-test }}
        run: |
          echo "Running --doctool to see if this changes the public API without updating the documentation."
          echo -e "If a diff is shown, it means that your code/doc changes are incomplete and you should update the class reference with --doctool.\n\n"
          ${{ matrix.bin }} --doctool --headless 2>&1 > /dev/null || true
          git diff --color --exit-code && ! git ls-files --others --exclude-standard | sed -e 's/^/New doc file missing in PR: /' | grep 'xml$'
        shell: bash

      - name: Test project converter
        if: ${{ matrix.proj-conv }}
        run: |
          mkdir -p converter_test
          cd converter_test
          touch project.godot
          ${{ matrix.bin }} --headless --validate-conversion-3to4
          cd ..
          rm converter_test -rf
        shell: bash

      - name: Prepare artifact
        if: ${{ matrix.artifact }}
        run: |
          chmod +x godot/bin/godot.* || true
        shell: bash

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        if: ${{ matrix.artifact }}
        with:
          name: ${{ matrix.cache-name }}

      - name: Upload editor artifacts
        uses: actions/upload-artifact@v3
        if: ${{ matrix.artifact }}
        with:
          name: model_explorer_${{ matrix.deploy-platform }}_x86_64
          path: |
            ./godot/bin/${{ matrix.editor-bin-name }}

  release:
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: List files
        run: |
          ls -R model_explorer_windows_x86_64
          ls -R model_explorer_linux_x86_64
          ls -R linux-editor-deploy-windows-editor
          ls -R linux-editor-deploy-linux-editor
        shell: bash
        
      - name: Archive files
        run: |
          zip -r model_explorer_windows_x86_64.zip model_explorer_windows_x86_64
          zip -r model_explorer_linux_x86_64.zip model_explorer_linux_x86_64
          zip -r linux-editor-deploy-windows-editor.zip linux-editor-deploy-windows-editor
          zip -r linux-editor-deploy-linux-editor.zip linux-editor-deploy-linux-editor

      - name: Create and Upload Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            model_explorer_windows_x86_64.zip
            model_explorer_linux_x86_64.zip
            linux-editor-deploy-windows-editor.zip
            linux-editor-deploy-linux-editor.zip
          body: "This is a V-Sekai/V-Sekai-game release"
          generate_release_notes: true
          draft: true
          prerelease: true
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
